/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.2.v20170220
 * Generated at: 2018-01-08 19:36:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import es.ligasnba.app.util.constants.Constants;

public final class registrationform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/Users/Sir/.m2/repository/org/springframework/spring-webmvc/3.2.18.RELEASE/spring-webmvc-3.2.18.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1482338760000L));
    _jspx_dependants.put("file:/C:/Users/Sir/.m2/repository/org/springframework/spring-webmvc/3.2.18.RELEASE/spring-webmvc-3.2.18.RELEASE.jar", Long.valueOf(1505150641460L));
    _jspx_dependants.put("jar:file:/C:/Users/Sir/.m2/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425975070000L));
    _jspx_dependants.put("file:/C:/Users/Sir/.m2/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1505151312971L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("es.ligasnba.app.util.constants.Constants");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \n");
      out.write("\n");
      out.write("\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> \n");
      out.write("<meta name=\"mobile-web-app-capable\" content=\"yes\" />\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("<head>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menu.jsp", out, false);
      out.write("\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/styles.css\"/>\n");
      out.write("<script type='text/javascript' src='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-1.10.2.js'></script>\n");
      out.write("<script type='text/javascript' src='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-ui.js'></script>\n");
      out.write("<script type='text/javascript' src='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/validation/dist/jquery.validate.min.js'></script>\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/pure-min.css\"/>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\n");
      out.write("function submitRegistration(){\n");
      out.write("\t\n");
      out.write("\tvar validator = $(\"#register-form\").validate({ \n");
      out.write("\n");
      out.write("\t\trules: { \n");
      out.write("\t\t\tuserName: {\n");
      out.write("\t\t\t\trequired: true,\n");
      out.write("\t\t\t\tmaxlength: ");
      out.print( Constants.cUserNameMaxLength );
      out.write(",\n");
      out.write("\t\t\t\tminlength: ");
      out.print( Constants.cUserNameMinLength );
      out.write(",\n");
      out.write("\t\t\t\tremote: {\n");
      out.write("\t\t\t\t\turl: \"/register/usernamecheck\",\n");
      out.write("\t\t\t\t\ttype: \"get\",\n");
      out.write("\t\t\t\t\tdata: {\n");
      out.write("\t\t\t\t\t\tuserName: function() {\n");
      out.write("\t\t\t\t\t\t\treturn $( \"#userName\" ).val();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpassword: {\n");
      out.write("\t\t\t\trequired: true,\n");
      out.write("\t\t\t\tmaxlength: ");
      out.print( Constants.cUserPassMaxLength );
      out.write(",\n");
      out.write("\t\t\t\tminlength: ");
      out.print( Constants.cUserPassMinLength );
      out.write("\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpassword2: {\n");
      out.write("\t\t\t\trequired: true,\n");
      out.write("\t\t\t\tequalTo:\"#password\"\t\t\t\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\temail: {\n");
      out.write("\t\t\t\trequired: true,\n");
      out.write("\t\t\t\temail: true\n");
      out.write("\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}, \n");
      out.write("\t\terrorElement: \"span\" , \n");
      out.write("\t\tmessages: { \n");
      out.write("\t\t\tuserName: {\n");
      out.write("\t\t\t\trequired: \"<font color='red'>· El nombre de usuario no puede estar vacío<br></font>\",\n");
      out.write("\t\t\t\tmaxlength: \"<font color='red'>· El nombre de usuario debe contener como máximo \"+ ");
      out.print( Constants.cUserNameMaxLength );
      out.write(" +\" caracteres<br></font>\",\n");
      out.write("\t\t\t\tminlength: \"<font color='red'>· El nombre de usuario debe contener al menos \"+ ");
      out.print( Constants.cUserNameMinLength );
      out.write(" +\" caracteres<br></font>\",\n");
      out.write("\t\t\t\tremote: \"<font color='red'>* El nombre de usuario ya pertenece a otro usuario.<br></font>\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpassword: {\n");
      out.write("\t\t\t\trequired: \"<font color='red'>· La contraseña no puede estar vacía<br></font>\",\n");
      out.write("\t\t\t\tmaxlength: \"<font color='red'>· La contraseña debe contener como máximo \"+ ");
      out.print( Constants.cUserPassMaxLength );
      out.write(" +\" caracteres<br></font>\",\n");
      out.write("\t\t\t\tminlength: \"<font color='red'>· La contraseña debe contener al menos \"+ ");
      out.print( Constants.cUserPassMinLength );
      out.write(" +\" caracteres<br></font>\"\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpassword2: {\n");
      out.write("\t\t\t\trequired: \"<font color='red'>· La confirmación de la contraseña no puede estar vacía<br></font>\",\n");
      out.write("\t\t\t\tequalTo: \"<font color='red'>· La confirmación y la contraseña no coinciden<br></font>\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\temail: {\n");
      out.write("\t\t\t\trequired: \"<font color='red'>· El email no puede estar vacío<br></font>\",\n");
      out.write("\t\t\t\temail: \"<font color='red'>· El email debe ser una dirección real de correo<br></font>\",\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t},\n");
      out.write("\t\tsubmitHandler: function(form){\n");
      out.write("\n");
      out.write("\t\t\t$('#registerButton').prop('disabled',true);\n");
      out.write("\n");
      out.write("\t\t\tvar uname= $('#userName').val();\n");
      out.write("\t\t\tvar pass = $('#password').val();\n");
      out.write("\t\t\tvar mail = $('#email').val();\n");
      out.write("\n");
      out.write("\t\t\t$.ajax({\n");
      out.write("\n");
      out.write("\t\t\t\ttype:\"post\",\n");
      out.write("\t\t\t\turl: \"/register/userregister\",\t\n");
      out.write("\t\t\t\tdata: ({userName:uname,password:pass,email:mail}),\n");
      out.write("\t\t\t\tdataType: \"json\",\n");
      out.write("\t\t\t\tsuccess: function(response){\n");
      out.write("\n");
      out.write("\t\t\t\t\tif (response.success){\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t$('#errorMessages').append(\"<font color='green'>· \"+response.message+\"</font><br> Redirigiendo a la página de login...\");\n");
      out.write("\t\t\t\t\t\twindow.setTimeout(function() {\n");
      out.write("\t\t\t\t\t\t\twindow.location.href = '/login';\n");
      out.write("\t\t\t\t\t\t}, 3000);\t\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\telse {\n");
      out.write("\t\t\t\t\t\t$('#errorMessages').append(\"<font color='red'>· \"+response.message+\"</font>\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\terror: function(){\n");
      out.write("\n");
      out.write("\t\t\t\t\talert(\"error\");\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\t\n");
      out.write("\n");
      out.write("\t\t} \n");
      out.write("\t}); \n");
      out.write("\tvalidator.form();\n");
      out.write("\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<title>Registro de usuario</title>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<form class=\"pure-form pure-form-stacked\" name=\"register-form\" id=\"register-form\" method=\"Post\" action=\"\">\n");
      out.write("\n");
      out.write("<fieldset>\n");
      out.write("<legend>Registro de Usuario</legend>\n");
      out.write("\n");
      out.write("<label for=\"userName\">Nombre de Usuario </label><input type=\"text\" id=\"userName\" name=\"userName\"/>\n");
      out.write("\n");
      out.write("\n");
      out.write("<label for=\"password\">Contraseña </label><input type=\"password\" id=\"password\" name=\"password\"/>\n");
      out.write("\n");
      out.write("<label for=\"password2\">Confirme Contraseña </label><input type=\"password\" id=\"password2\" name=\"password2\" />\n");
      out.write("<label for=\"email\">Email</label><input type=\"text\" id=\"email\" name=\"email\"/>\n");
      out.write("\n");
      out.write("\n");
      out.write("<p><input class=\"pure-button pure-button-primary\" id=\"registerButton\" type=\"submit\" onclick=\"submitRegistration();\" value=\"Registrarse\" /></p>\n");
      out.write("\n");
      out.write("</fieldset>\n");
      out.write("<div id=\"errorMessages\"></div>\n");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
